<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim on 대진!</title>
    <link>https://daejinseok.github.io/tags/vim/</link>
    <description>Recent content in Vim on 대진!</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <copyright>Written by daejin</copyright>
    <lastBuildDate>Sat, 31 May 2014 00:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://daejinseok.github.io/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>팁3. 일보 후퇴 삼보 전진</title>
      <link>https://daejinseok.github.io/post/2014-05-31-pvim-104-tip3-take_one_step_back_then_three_forward/</link>
      <pubDate>Sat, 31 May 2014 00:00:00 +0900</pubDate>
      
      <guid>https://daejinseok.github.io/post/2014-05-31-pvim-104-tip3-take_one_step_back_then_three_forward/</guid>
      <description>원문 Practical Vim - The Vim Way
Vim에서 문자의 앞뒤로 공백을 간단히 추가할 수 있습니다. 처음에는 이 방 법이 조금 이상해 보이지만, 반복할 수 있다는 장점이 있습니다. 우리는 다음의 작업을 어려움 없이 처리 할 수 있습니다.
아래와 같은 코드를 살펴봅시다.
var foo=&amp;quot;method(&amp;quot;+argument1+&amp;quot;,&amp;quot;+argument2+&amp;quot;)&amp;quot;;  약간 짜증나게 문자들이 연결되어 있습니다. 하지만 아래처럼 +기호 사이 각각에 공백을 추가하면 덜 짜증나게 될 것 같습니다.
var foo=&amp;quot;method(&amp;quot; + argument1 + &amp;quot;,&amp;quot; + argument2 + &amp;quot;)&amp;quot;;  반복 가능한 변경 만들기 일반적인 접근방법으로 해보면 아래와 같습니다.</description>
    </item>
    
    <item>
      <title>일타이피</title>
      <link>https://daejinseok.github.io/post/2014-05-28-pvim-103-tip2-two_for_the_price_of_one/</link>
      <pubDate>Wed, 28 May 2014 00:00:01 +0900</pubDate>
      
      <guid>https://daejinseok.github.io/post/2014-05-28-pvim-103-tip2-two_for_the_price_of_one/</guid>
      <description>원문 Practical Vim - The Vim Way
*A*명령은 두 동작을 $a 하나의 키입력으로 합친 것이라고 말할 수 있습니다. 이처럼 동작하는 명령은 이것 하나만 있는 것이 아닙니다. Vim에는 두 개 이상의 명령을 압축한 복합명령들이 있습니다. 아래 표는 그 예를 몇 가지 보여줍니다. 혹시 공통점이 보이나요?
   복합명령 동등한 명령     C c$   s cl   S ^C   I ^i   A $a   o A&amp;lt;CR&amp;gt;   O ko    ko( 혹은 더 나쁘게 k$a&amp;lt;CR&amp;gt;)를 입력한다면, 그만 사용하고, 무엇을 하고 있는지 생각을 해보면 *O*명령과 동일하다는 것을 알게 됩니다.</description>
    </item>
    
    <item>
      <title>팁2. 반복하지마세요.</title>
      <link>https://daejinseok.github.io/post/2014-05-28-pvim-102-tip2-dont_repeat_yourself/</link>
      <pubDate>Wed, 28 May 2014 00:00:00 +0900</pubDate>
      
      <guid>https://daejinseok.github.io/post/2014-05-28-pvim-102-tip2-dont_repeat_yourself/</guid>
      <description>원문 Practical Vim - Tip 2 Don&amp;rsquo;t Repeat Yourself
아래에 문장 끝에 세미콜론을 추가해야 되는 자바스크립트 코드가 있습니다.
var foo = 1 var bar = &#39;a&#39; var foobar = foo + bar   커서를 문장 끝으로 이동 ( $ ) 입력모드로 변경 ( a ) 세미콜론을 추가 ( ; ) 명령모드로 변경 ( ESC )
  위와 같이 입력하면 첫 번째 문장문장 끝에 세미콜론을 추가할 수 있습니다. 그리고 나머지 두 줄은 간단히 아래와 같이 처리 할 수 있습니다.</description>
    </item>
    
    <item>
      <title>팁1. 점명령을 만나다</title>
      <link>https://daejinseok.github.io/post/2014-05-27-pvim-101-tip1-meet_the_dot_command/</link>
      <pubDate>Tue, 27 May 2014 00:00:01 +0900</pubDate>
      
      <guid>https://daejinseok.github.io/post/2014-05-27-pvim-101-tip1-meet_the_dot_command/</guid>
      <description>원문 Practical Vim - Tip 1 Meet the Dot Command
점명령(Dot Command)은 마지막 변경을 반복합니다. 이것은 Vim에서 가장 강력하고 유용한 명령입니다.
Vim의 도움말에서는 점명령을 단순히 “마지막 변경을 반복”이라고 적혀있습니다. 하지만 이와 같은 단순한 설명으로는 점명령의 핵심을 알 수 없습니다. 우선 변경이라는 것이 무엇인지 알아야 합니다.
마지막 변경이라는 것은 하나의 문자를 변경하는 것일 수도 있고, 라인 전체, 혹은 파일 전체를 변경하는 것일 수도 있습니다.
Line one Line two Line three Line four  x 명령은 커서 아래 문자를 삭제합니다.</description>
    </item>
    
    <item>
      <title>1장. Vim으로 가는 길</title>
      <link>https://daejinseok.github.io/post/2014-05-27-pvim-100-ch1/</link>
      <pubDate>Tue, 27 May 2014 00:00:00 +0900</pubDate>
      
      <guid>https://daejinseok.github.io/post/2014-05-27-pvim-100-ch1/</guid>
      <description>원문 Practical Vim - The Vim Way
텍스트 작업은 수정할 곳을 반복적으로 이동하며, 반복적인 변경을 많이 합니다. 이런 반복되는 작업을 효과적으로 할 수 있다면 많은 시간을 절약할 수 있습니다.
Vim은 이런 반복에 최적화되어 있습니다. Vim은 최근에 한 작업을 기억하고 있으며, 한 번의 키입력으로 언제나 재실행할 수 있습니다. 이 말은 강력하게 들리지만, 유용한 반복 단위를 만드는 방법을 배우지 않는 한 별로 쓸모가 없습니다. 이런 개념을 익히는 것은 효과적인 Vim을 다루기 위한 열쇠입니다.</description>
    </item>
    
  </channel>
</rss>